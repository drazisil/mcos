<?xml version="1.0" encoding="UTF-8" ?>
<testsuites name="vitest tests" tests="231" failures="0" errors="0" time="3.489">
    <testsuite name="test/UserConnection.test.ts" timestamp="2024-12-15T11:33:32.642Z" hostname="strawberry" tests="0" failures="0" errors="0" skipped="0" time="0">
    </testsuite>
    <testsuite name="src/chat/assertLength.test.ts" timestamp="2024-12-15T11:33:32.643Z" hostname="strawberry" tests="10" failures="0" errors="0" skipped="0" time="0.006439385">
        <testcase classname="src/chat/assertLength.test.ts" name="assertLength &gt; should not throw an error when actual length matches expected length" time="0.002288282">
        </testcase>
        <testcase classname="src/chat/assertLength.test.ts" name="assertLength &gt; should throw an error when actual length does not match expected length" time="0.000429458">
        </testcase>
        <testcase classname="src/chat/assertLength.test.ts" name="assertLength &gt; should throw an error with the correct message when lengths do not match" time="0.000385219">
        </testcase>
        <testcase classname="src/chat/assertLength.test.ts" name="assertLength &gt; should not throw an error for zero lengths when they match" time="0.000280889">
        </testcase>
        <testcase classname="src/chat/assertLength.test.ts" name="assertLength &gt; should throw an error for zero actual length when expected length is non-zero" time="0.000287148">
        </testcase>
        <testcase classname="src/chat/assertLength.test.ts" name="assertLength &gt; should throw an error for non-zero actual length when expected length is zero" time="0.000269329">
        </testcase>
        <testcase classname="src/chat/assertLength.test.ts" name="assertLength &gt; should throw an error when actual length is negative" time="0.000251639">
        </testcase>
        <testcase classname="src/chat/assertLength.test.ts" name="assertLength &gt; should throw an error when expected length is negative" time="0.000313669">
        </testcase>
        <testcase classname="src/chat/assertLength.test.ts" name="assertLength &gt; should not throw an error for very large matching lengths" time="0.000263119">
        </testcase>
        <testcase classname="src/chat/assertLength.test.ts" name="assertLength &gt; should throw an error for very large non-matching lengths" time="0.000208239">
        </testcase>
    </testsuite>
    <testsuite name="src/chat/timestampToTimeT.test.ts" timestamp="2024-12-15T11:33:32.645Z" hostname="strawberry" tests="4" failures="0" errors="0" skipped="0" time="0.003885645">
        <testcase classname="src/chat/timestampToTimeT.test.ts" name="timestampToTime32T &gt; should convert milliseconds to seconds correctly" time="0.001756184">
        </testcase>
        <testcase classname="src/chat/timestampToTimeT.test.ts" name="timestampToTime32T &gt; should handle large timestamps correctly" time="0.000231049">
        </testcase>
        <testcase classname="src/chat/timestampToTimeT.test.ts" name="timestampToTime32T &gt; should handle negative timestamps correctly" time="0.000236859">
        </testcase>
        <testcase classname="src/chat/timestampToTimeT.test.ts" name="timestampToTime32T &gt; should handle edge cases correctly" time="0.000210459">
        </testcase>
    </testsuite>
    <testsuite name="src/chat/toHexString.test.ts" timestamp="2024-12-15T11:33:32.646Z" hostname="strawberry" tests="11" failures="0" errors="0" skipped="0" time="0.18481582">
        <testcase classname="src/chat/toHexString.test.ts" name="bufferToHexString &gt; should convert a buffer to a hexadecimal string" time="0.001167676">
        </testcase>
        <testcase classname="src/chat/toHexString.test.ts" name="bufferToHexString &gt; should handle an empty buffer" time="0.000211479">
        </testcase>
        <testcase classname="src/chat/toHexString.test.ts" name="bufferToHexString &gt; should pad single digit hex values with a leading zero" time="0.00016965">
        </testcase>
        <testcase classname="src/chat/toHexString.test.ts" name="bufferToHexString &gt; should handle a buffer with multiple bytes" time="0.000182649">
        </testcase>
        <testcase classname="src/chat/toHexString.test.ts" name="bufferToHexString &gt; should handle null input gracefully" time="0.000937426">
        </testcase>
        <testcase classname="src/chat/toHexString.test.ts" name="bufferToHexString &gt; should handle undefined input gracefully" time="0.000232159">
        </testcase>
        <testcase classname="src/chat/toHexString.test.ts" name="bufferToHexString &gt; should handle a very large buffer" time="0.179832539">
        </testcase>
        <testcase classname="src/chat/toHexString.test.ts" name="bufferToHexString &gt; should handle a buffer with Unicode characters" time="0.000268139">
        </testcase>
        <testcase classname="src/chat/toHexString.test.ts" name="bufferToHexString &gt; should handle a buffer with mixed byte values" time="0.000166269">
        </testcase>
        <testcase classname="src/chat/toHexString.test.ts" name="bufferToHexString &gt; should handle a buffer with all possible byte values" time="0.000258569">
        </testcase>
        <testcase classname="src/chat/toHexString.test.ts" name="bufferToHexString &gt; should handle a buffer with non-printable ASCII characters" time="0.00015784">
        </testcase>
    </testsuite>
    <testsuite name="src/chat/writeShortBoolean.test.ts" timestamp="2024-12-15T11:33:32.648Z" hostname="strawberry" tests="4" failures="0" errors="0" skipped="0" time="0.00504385">
        <testcase classname="src/chat/writeShortBoolean.test.ts" name="writeShortBooleanBE &gt; should write 1 for true at the specified offset" time="0.001857423">
        </testcase>
        <testcase classname="src/chat/writeShortBoolean.test.ts" name="writeShortBooleanBE &gt; should write 0 for false at the specified offset" time="0.000271359">
        </testcase>
        <testcase classname="src/chat/writeShortBoolean.test.ts" name="writeShortBooleanBE &gt; should not affect other parts of the buffer" time="0.000218909">
        </testcase>
        <testcase classname="src/chat/writeShortBoolean.test.ts" name="writeShortBooleanBE &gt; should throw an error if the offset is out of bounds" time="0.001095476">
        </testcase>
    </testsuite>
    <testsuite name="src/chat/writeZeroTerminatedString.test.ts" timestamp="2024-12-15T11:33:32.649Z" hostname="strawberry" tests="6" failures="0" errors="0" skipped="0" time="0.00498809">
        <testcase classname="src/chat/writeZeroTerminatedString.test.ts" name="writeZeroTerminatedString &gt; should write a zero-terminated string to the buffer at the specified offset" time="0.001531304">
        </testcase>
        <testcase classname="src/chat/writeZeroTerminatedString.test.ts" name="writeZeroTerminatedString &gt; should handle an empty string correctly" time="0.000226679">
        </testcase>
        <testcase classname="src/chat/writeZeroTerminatedString.test.ts" name="writeZeroTerminatedString &gt; should overwrite existing data in the buffer" time="0.000191589">
        </testcase>
        <testcase classname="src/chat/writeZeroTerminatedString.test.ts" name="writeZeroTerminatedString &gt; should handle writing at the start of the buffer" time="0.000198989">
        </testcase>
        <testcase classname="src/chat/writeZeroTerminatedString.test.ts" name="writeZeroTerminatedString &gt; should handle writing at the end of the buffer" time="0.00020406">
        </testcase>
        <testcase classname="src/chat/writeZeroTerminatedString.test.ts" name="writeZeroTerminatedString &gt; should handle buffer overflow" time="0.001301824">
        </testcase>
    </testsuite>
    <testsuite name="packages/cli/test/index.test.ts" timestamp="2024-12-15T11:33:32.650Z" hostname="strawberry" tests="1" failures="0" errors="0" skipped="0" time="0.006619764">
        <testcase classname="packages/cli/test/index.test.ts" name="ConsoleThread &gt; should throw if more then one instance is created" time="0.00518378">
        </testcase>
    </testsuite>
    <testsuite name="packages/database/test/Database.test.ts" timestamp="2024-12-15T11:33:32.650Z" hostname="strawberry" tests="3" failures="0" errors="0" skipped="0" time="0.006461015">
        <testcase classname="packages/database/test/Database.test.ts" name="Database &gt; fetchSessionKeyByCustomerId &gt; throws when session key is not found" time="0.002751029">
        </testcase>
        <testcase classname="packages/database/test/Database.test.ts" name="Database &gt; fetchSessionKeyByConnectionId &gt; throws when session key is not found" time="0.000468169">
        </testcase>
        <testcase classname="packages/database/test/Database.test.ts" name="Database &gt; updateUser &gt; returns successfully when passed a valid user record" time="0.001351965">
        </testcase>
    </testsuite>
    <testsuite name="packages/database/test/tunables.test.ts" timestamp="2024-12-15T11:33:32.651Z" hostname="strawberry" tests="4" failures="0" errors="0" skipped="0" time="0.005491478">
        <testcase classname="packages/database/test/tunables.test.ts" name="Tunables &gt; should return the correct tunable value" time="0.001893792">
        </testcase>
        <testcase classname="packages/database/test/tunables.test.ts" name="Tunables &gt; should throw an error for an invalid tunable name" time="0.001256916">
        </testcase>
        <testcase classname="packages/database/test/tunables.test.ts" name="Tunables &gt; should set the tunable value correctly" time="0.000270309">
        </testcase>
        <testcase classname="packages/database/test/tunables.test.ts" name="Tunables &gt; should throw an error when setting an invalid tunable name" time="0.000319359">
        </testcase>
    </testsuite>
    <testsuite name="packages/gateway/test/encryption.test.ts" timestamp="2024-12-15T11:33:32.652Z" hostname="strawberry" tests="4" failures="0" errors="0" skipped="0" time="0.0101891">
        <testcase classname="packages/gateway/test/encryption.test.ts" name="Encryption &gt; should be able to encrypt and decrypt a command message" time="0.00502236">
        </testcase>
        <testcase classname="packages/gateway/test/encryption.test.ts" name="Encryption &gt; should be able to encrypt and decrypt a command message" time="0.000912467">
        </testcase>
        <testcase classname="packages/gateway/test/encryption.test.ts" name="Encryption &gt; data should throw when the key is too short" time="0.001204115">
        </testcase>
        <testcase classname="packages/gateway/test/encryption.test.ts" name="Encryption &gt; command should throw when the key is too short" time="0.000419918">
        </testcase>
    </testsuite>
    <testsuite name="packages/gateway/test/mcotsPortRouter.test.ts" timestamp="2024-12-15T11:33:32.653Z" hostname="strawberry" tests="4" failures="0" errors="0" skipped="0" time="0.005913767">
        <testcase classname="packages/gateway/test/mcotsPortRouter.test.ts" name="mcotsPortRouter &gt; should log an error and close the socket if local port is undefined" time="0.002618619">
        </testcase>
        <testcase classname="packages/gateway/test/mcotsPortRouter.test.ts" name="mcotsPortRouter &gt; should handle data event and route initial message" time="0.001863623">
        </testcase>
        <testcase classname="packages/gateway/test/mcotsPortRouter.test.ts" name="mcotsPortRouter &gt; should log socket end event" time="0.000224919">
        </testcase>
        <testcase classname="packages/gateway/test/mcotsPortRouter.test.ts" name="mcotsPortRouter &gt; should log socket error event" time="0.000216949">
        </testcase>
    </testsuite>
    <testsuite name="packages/gateway/test/npsPortRouter.test.ts" timestamp="2024-12-15T11:33:32.654Z" hostname="strawberry" tests="5" failures="0" errors="0" skipped="0" time="0.008269578">
        <testcase classname="packages/gateway/test/npsPortRouter.test.ts" name="npsPortRouter &gt; should log an error and close the socket if local port is undefined" time="0.00260104">
        </testcase>
        <testcase classname="packages/gateway/test/npsPortRouter.test.ts" name="npsPortRouter &gt; should log the start of the router and send ok to login packet for port 7003" time="0.001509154">
        </testcase>
        <testcase classname="packages/gateway/test/npsPortRouter.test.ts" name="npsPortRouter &gt; should handle data event and route initial message" time="0.002237321">
        </testcase>
        <testcase classname="packages/gateway/test/npsPortRouter.test.ts" name="npsPortRouter &gt; should log socket end event" time="0.000433048">
        </testcase>
        <testcase classname="packages/gateway/test/npsPortRouter.test.ts" name="npsPortRouter &gt; should log socket error event" time="0.000419539">
        </testcase>
    </testsuite>
    <testsuite name="packages/gateway/test/portRouters.test.ts" timestamp="2024-12-15T11:33:32.655Z" hostname="strawberry" tests="11" failures="0" errors="0" skipped="0" time="0.01016953">
        <testcase classname="packages/gateway/test/portRouters.test.ts" name="addPortRouter &gt; should add a router for a specific port" time="0.00245999">
        </testcase>
        <testcase classname="packages/gateway/test/portRouters.test.ts" name="addPortRouter &gt; should overwrite an existing router for the same port" time="0.000411849">
        </testcase>
        <testcase classname="packages/gateway/test/portRouters.test.ts" name="addPortRouter &gt; should handle multiple ports correctly" time="0.000392728">
        </testcase>
        <testcase classname="packages/gateway/test/portRouters.test.ts" name="addPortRouter &gt; getPortRouter &gt; should return the correct router for a specific port" time="0.000542668">
        </testcase>
        <testcase classname="packages/gateway/test/portRouters.test.ts" name="addPortRouter &gt; getPortRouter &gt; should return notFoundRouter if no router is found for the port" time="0.000459828">
        </testcase>
        <testcase classname="packages/gateway/test/portRouters.test.ts" name="addPortRouter &gt; getPortRouter &gt; should return the correct router after overwriting an existing router for the same port" time="0.000383638">
        </testcase>
        <testcase classname="packages/gateway/test/portRouters.test.ts" name="addPortRouter &gt; getPortRouter &gt; should handle multiple ports correctly" time="0.000409178">
        </testcase>
        <testcase classname="packages/gateway/test/portRouters.test.ts" name="addPortRouter &gt; clearPortRouters &gt; should clear all routers" time="0.000589158">
        </testcase>
        <testcase classname="packages/gateway/test/portRouters.test.ts" name="addPortRouter &gt; clearPortRouters &gt; addPortRouter &gt; should throw an error if the port number is not an integer" time="0.001340295">
        </testcase>
        <testcase classname="packages/gateway/test/portRouters.test.ts" name="addPortRouter &gt; clearPortRouters &gt; addPortRouter &gt; should throw an error if the port number is negative" time="0.000547178">
        </testcase>
        <testcase classname="packages/gateway/test/portRouters.test.ts" name="addPortRouter &gt; clearPortRouters &gt; addPortRouter &gt; should throw an error if the port number is greater than 65535" time="0.000509358">
        </testcase>
    </testsuite>
    <testsuite name="packages/gateway/test/socketErrorHandler.test.ts" timestamp="2024-12-15T11:33:32.657Z" hostname="strawberry" tests="2" failures="0" errors="0" skipped="0" time="0.006967073">
        <testcase classname="packages/gateway/test/socketErrorHandler.test.ts" name="socketErrorHandler &gt; should log a debug message when error code is ECONNRESET" time="0.003848145">
        </testcase>
        <testcase classname="packages/gateway/test/socketErrorHandler.test.ts" name="socketErrorHandler &gt; should throw an error when error code is not handled" time="0.001579394">
        </testcase>
    </testsuite>
    <testsuite name="packages/gateway/test/socketUtility.test.ts" timestamp="2024-12-15T11:33:32.657Z" hostname="strawberry" tests="5" failures="0" errors="0" skipped="0" time="0.009737802">
        <testcase classname="packages/gateway/test/socketUtility.test.ts" name="tagSocketWithId &gt; returns an object with the correct properties" time="0.001384374">
        </testcase>
        <testcase classname="packages/gateway/test/socketUtility.test.ts" name="tagSocketWithId &gt; returns an object with the correct values" time="0.000310658">
        </testcase>
        <testcase classname="packages/gateway/test/socketUtility.test.ts" name="tagSocketWithId &gt; tagSocketWithId &gt; returns an object with the correct properties" time="0.000216419">
        </testcase>
        <testcase classname="packages/gateway/test/socketUtility.test.ts" name="tagSocketWithId &gt; trySocketWrite &gt; resolves when data is successfully written" time="0.004455133">
        </testcase>
        <testcase classname="packages/gateway/test/socketUtility.test.ts" name="tagSocketWithId &gt; trySocketWrite &gt; rejects when an error occurs during write" time="0.001868123">
        </testcase>
    </testsuite>
    <testsuite name="packages/login/test/index.test.ts" timestamp="2024-12-15T11:33:32.658Z" hostname="strawberry" tests="1" failures="0" errors="0" skipped="0" time="0.002913888">
        <testcase classname="packages/login/test/index.test.ts" name="needs tests" time="0.001669004">
        </testcase>
    </testsuite>
    <testsuite name="packages/mcots/test/ErrorNoKey.test.ts" timestamp="2024-12-15T11:33:32.659Z" hostname="strawberry" tests="2" failures="0" errors="0" skipped="0" time="0.002743159">
        <testcase classname="packages/mcots/test/ErrorNoKey.test.ts" name="ErrorNoKey &gt; should have default message &quot;No key provided&quot; when no message is given" time="0.001174485">
        </testcase>
        <testcase classname="packages/mcots/test/ErrorNoKey.test.ts" name="ErrorNoKey &gt; should use the provided message" time="0.000185269">
        </testcase>
    </testsuite>
    <testsuite name="packages/mcots/test/index.test.ts" timestamp="2024-12-15T11:33:32.659Z" hostname="strawberry" tests="1" failures="0" errors="0" skipped="0" time="0.004182814">
        <testcase classname="packages/mcots/test/index.test.ts" name="example &gt; should pass" time="0.001584154">
        </testcase>
    </testsuite>
    <testsuite name="packages/nps/test/BaseSerializable.test.ts" timestamp="2024-12-15T11:33:32.660Z" hostname="strawberry" tests="4" failures="0" errors="0" skipped="0" time="0.004589122">
        <testcase classname="packages/nps/test/BaseSerializable.test.ts" name="BaseSerializable &gt; should throw an error when calling serialize" time="0.002168911">
        </testcase>
        <testcase classname="packages/nps/test/BaseSerializable.test.ts" name="BaseSerializable &gt; should throw an error when calling deserialize" time="0.000313698">
        </testcase>
        <testcase classname="packages/nps/test/BaseSerializable.test.ts" name="BaseSerializable &gt; should throw an error when calling getByteSize" time="0.000325659">
        </testcase>
        <testcase classname="packages/nps/test/BaseSerializable.test.ts" name="BaseSerializable &gt; should throw an error when calling toString" time="0.000314339">
        </testcase>
    </testsuite>
    <testsuite name="packages/nps/test/index.test.ts" timestamp="2024-12-15T11:33:32.660Z" hostname="strawberry" tests="1" failures="0" errors="0" skipped="0" time="0.003659316">
        <testcase classname="packages/nps/test/index.test.ts" name="example &gt; should pass" time="0.002170562">
        </testcase>
    </testsuite>
    <testsuite name="packages/nps/test/pureCompare.test.ts" timestamp="2024-12-15T11:33:32.661Z" hostname="strawberry" tests="20" failures="0" errors="0" skipped="0" time="0.006152526">
        <testcase classname="packages/nps/test/pureCompare.test.ts" name="isZero &gt; returns true if the number is zero" time="0.001294915">
        </testcase>
        <testcase classname="packages/nps/test/pureCompare.test.ts" name="isZero &gt; returns false if the number is not zero" time="0.000236569">
        </testcase>
        <testcase classname="packages/nps/test/pureCompare.test.ts" name="isUndefined &gt; returns true if the value is undefined" time="0.000153159">
        </testcase>
        <testcase classname="packages/nps/test/pureCompare.test.ts" name="isUndefined &gt; returns false if the value is not undefined" time="0.00012451">
        </testcase>
        <testcase classname="packages/nps/test/pureCompare.test.ts" name="lessThan &gt; returns true if the first number is less than the second number" time="0.000143269">
        </testcase>
        <testcase classname="packages/nps/test/pureCompare.test.ts" name="lessThan &gt; returns false if the first number is greater than or equal to the second number" time="0.00013463">
        </testcase>
        <testcase classname="packages/nps/test/pureCompare.test.ts" name="lessThanOrEqual &gt; returns true if the first number is less than or equal to the second number" time="0.00015006">
        </testcase>
        <testcase classname="packages/nps/test/pureCompare.test.ts" name="lessThanOrEqual &gt; returns false if the first number is greater than the second number" time="0.000112429">
        </testcase>
        <testcase classname="packages/nps/test/pureCompare.test.ts" name="greaterThan &gt; returns true if the first number is greater than the second number" time="0.000132029">
        </testcase>
        <testcase classname="packages/nps/test/pureCompare.test.ts" name="greaterThan &gt; returns false if the first number is less than or equal to the second number" time="0.00013105">
        </testcase>
        <testcase classname="packages/nps/test/pureCompare.test.ts" name="greaterThanOrEqual &gt; returns true if the first number is greater than or equal to the second number" time="0.000146789">
        </testcase>
        <testcase classname="packages/nps/test/pureCompare.test.ts" name="greaterThanOrEqual &gt; returns false if the first number is less than the second number" time="0.00010778">
        </testcase>
        <testcase classname="packages/nps/test/pureCompare.test.ts" name="areBothZero &gt; returns true if both numbers are zero" time="0.00014398">
        </testcase>
        <testcase classname="packages/nps/test/pureCompare.test.ts" name="areBothZero &gt; returns false if at least one of the numbers is not zero" time="0.000273089">
        </testcase>
        <testcase classname="packages/nps/test/pureCompare.test.ts" name="areBothUndefined &gt; returns true if both values are undefined" time="0.00018492">
        </testcase>
        <testcase classname="packages/nps/test/pureCompare.test.ts" name="areBothUndefined &gt; returns false if at least one of the values is not undefined" time="0.000194139">
        </testcase>
        <testcase classname="packages/nps/test/pureCompare.test.ts" name="areBothSet &gt; returns true if both values are set" time="0.000221979">
        </testcase>
        <testcase classname="packages/nps/test/pureCompare.test.ts" name="areBothSet &gt; returns false if at least one of the values is not set" time="0.000193789">
        </testcase>
        <testcase classname="packages/nps/test/pureCompare.test.ts" name="isOnlyOneSet &gt; returns true if only one of the values is set" time="0.000182309">
        </testcase>
        <testcase classname="packages/nps/test/pureCompare.test.ts" name="isOnlyOneSet &gt; returns false if both values are set or both values are not set" time="0.00016057">
        </testcase>
    </testsuite>
    <testsuite name="packages/nps/test/pureGet.test.ts" timestamp="2024-12-15T11:33:32.664Z" hostname="strawberry" tests="12" failures="0" errors="0" skipped="0" time="0.006247485">
        <testcase classname="packages/nps/test/pureGet.test.ts" name="getWord &gt; returns the word at the specified offset in little-endian format" time="0.001246525">
        </testcase>
        <testcase classname="packages/nps/test/pureGet.test.ts" name="getWord &gt; returns the word at the specified offset in big-endian format" time="0.000240249">
        </testcase>
        <testcase classname="packages/nps/test/pureGet.test.ts" name="getDWord &gt; returns the dword at the specified offset in little-endian format" time="0.000238179">
        </testcase>
        <testcase classname="packages/nps/test/pureGet.test.ts" name="getDWord &gt; returns the dword at the specified offset in big-endian format" time="0.000207719">
        </testcase>
        <testcase classname="packages/nps/test/pureGet.test.ts" name="getNBytes &gt; returns the first n bytes of a buffer" time="0.001220245">
        </testcase>
        <testcase classname="packages/nps/test/pureGet.test.ts" name="getAsHex &gt; returns the hexadecimal string representation of a buffer" time="0.000230089">
        </testcase>
        <testcase classname="packages/nps/test/pureGet.test.ts" name="getAsHex &gt; adds a leading zero if the length of the hexadecimal string is odd" time="0.00017766">
        </testcase>
        <testcase classname="packages/nps/test/pureGet.test.ts" name="getLenString &gt; returns the string from a buffer based on the given offset and length in little-endian format" time="0.0002045">
        </testcase>
        <testcase classname="packages/nps/test/pureGet.test.ts" name="getLenString &gt; returns the string from a buffer based on the given offset and length in big-endian format" time="0.00018391">
        </testcase>
        <testcase classname="packages/nps/test/pureGet.test.ts" name="getLenBlob &gt; returns the blob from a buffer based on the given offset and length in little-endian format" time="0.000242489">
        </testcase>
        <testcase classname="packages/nps/test/pureGet.test.ts" name="getLenBlob &gt; returns the blob from a buffer based on the given offset and length in big-endian format" time="0.000211309">
        </testcase>
        <testcase classname="packages/nps/test/pureGet.test.ts" name="getShortBool &gt; returns the 2-byte boolean value from the specified buffer at the given offset" time="0.000195089">
        </testcase>
    </testsuite>
    <testsuite name="packages/patch/test/PatchServer.test.ts" timestamp="2024-12-15T11:33:32.668Z" hostname="strawberry" tests="1" failures="0" errors="0" skipped="0" time="0.006396685">
        <testcase classname="packages/patch/test/PatchServer.test.ts" name="PatchServer &gt; should return the hard-coded value that tells the client there are no updates or patches" time="0.00505932">
        </testcase>
    </testsuite>
    <testsuite name="packages/persona/test/getPersonasByPersonaId.test.ts" timestamp="2024-12-15T11:33:32.668Z" hostname="strawberry" tests="3" failures="0" errors="0" skipped="0" time="0.004124264">
        <testcase classname="packages/persona/test/getPersonasByPersonaId.test.ts" name="getPersonasByPersonaId &gt; returns a persona" time="0.001390774">
        </testcase>
        <testcase classname="packages/persona/test/getPersonasByPersonaId.test.ts" name="getPersonasByPersonaId &gt; getPersonasByPersonaId &gt; returns a persona when a matching ID is found" time="0.000249019">
        </testcase>
        <testcase classname="packages/persona/test/getPersonasByPersonaId.test.ts" name="getPersonasByPersonaId &gt; getPersonasByPersonaId &gt; throws an error when no matching ID is found" time="0.001363924">
        </testcase>
    </testsuite>
    <testsuite name="packages/shard/test/shard-entry.test.ts" timestamp="2024-12-15T11:33:32.669Z" hostname="strawberry" tests="1" failures="0" errors="0" skipped="0" time="0.003191798">
        <testcase classname="packages/shard/test/shard-entry.test.ts" name="ShardEntry#formatForShardList() &gt; should return a formatted list" time="0.001928412">
        </testcase>
    </testsuite>
    <testsuite name="packages/shared/src/ServerMessage.test.ts" timestamp="2024-12-15T11:33:32.669Z" hostname="strawberry" tests="2" failures="0" errors="0" skipped="0" time="0.005408929">
        <testcase classname="packages/shared/src/ServerMessage.test.ts" name="ServerMessage &gt; .byteLength &gt; should have the correct size" time="0.001847063">
        </testcase>
        <testcase classname="packages/shared/src/ServerMessage.test.ts" name="ServerMessage &gt; should serialize and deserialize correctly" time="0.001830273">
        </testcase>
    </testsuite>
    <testsuite name="packages/shared/test/BaseSerialized.test.ts" timestamp="2024-12-15T11:33:32.669Z" hostname="strawberry" tests="6" failures="0" errors="0" skipped="0" time="0.005637858">
        <testcase classname="packages/shared/test/BaseSerialized.test.ts" name="BaseSerialized &gt; should have a length" time="0.002039342">
        </testcase>
        <testcase classname="packages/shared/test/BaseSerialized.test.ts" name="BaseSerialized &gt; should have a string representation" time="0.000323919">
        </testcase>
        <testcase classname="packages/shared/test/BaseSerialized.test.ts" name="BaseSerialized &gt; should have a hex representation" time="0.000190629">
        </testcase>
        <testcase classname="packages/shared/test/BaseSerialized.test.ts" name="BaseSerialized &gt; should have a data property" time="0.000574588">
        </testcase>
        <testcase classname="packages/shared/test/BaseSerialized.test.ts" name="BaseSerialized &gt; should throw when serialize is not implemented" time="0.000843616">
        </testcase>
        <testcase classname="packages/shared/test/BaseSerialized.test.ts" name="BaseSerialized &gt; should throw when deserialize is not implemented" time="0.00024116">
        </testcase>
    </testsuite>
    <testsuite name="packages/shared/test/RawMessage.test.ts" timestamp="2024-12-15T11:33:32.671Z" hostname="strawberry" tests="8" failures="0" errors="0" skipped="0" time="0.018978876">
        <testcase classname="packages/shared/test/RawMessage.test.ts" name="RawMessage &gt; should serialize and deserialize correctly" time="0.013948725">
        </testcase>
        <testcase classname="packages/shared/test/RawMessage.test.ts" name="RawMessage &gt; should have a length" time="0.000324789">
        </testcase>
        <testcase classname="packages/shared/test/RawMessage.test.ts" name="RawMessage &gt; should have a string representation" time="0.000351749">
        </testcase>
        <testcase classname="packages/shared/test/RawMessage.test.ts" name="RawMessage &gt; should have a hex representation" time="0.000247159">
        </testcase>
        <testcase classname="packages/shared/test/RawMessage.test.ts" name="RawMessage &gt; should have a data property" time="0.000589938">
        </testcase>
        <testcase classname="packages/shared/test/RawMessage.test.ts" name="RawMessage &gt; should have a messageId property" time="0.000229279">
        </testcase>
        <testcase classname="packages/shared/test/RawMessage.test.ts" name="RawMessage &gt; should throw when deserialize is given a buffer smaller than 4 bytes" time="0.001207925">
        </testcase>
        <testcase classname="packages/shared/test/RawMessage.test.ts" name="RawMessage &gt; should throw when deserialize is given a buffer smaller than the length in the header" time="0.000353778">
        </testcase>
    </testsuite>
    <testsuite name="packages/shared/test/SerializedBuffer.test.ts" timestamp="2024-12-15T11:33:32.672Z" hostname="strawberry" tests="7" failures="0" errors="0" skipped="0" time="0.00770593">
        <testcase classname="packages/shared/test/SerializedBuffer.test.ts" name="SerializedBuffer &gt; should serialize and deserialize correctly" time="0.00274218">
        </testcase>
        <testcase classname="packages/shared/test/SerializedBuffer.test.ts" name="SerializedBuffer &gt; should have a length" time="0.000280269">
        </testcase>
        <testcase classname="packages/shared/test/SerializedBuffer.test.ts" name="SerializedBuffer &gt; should have a string representation" time="0.000232929">
        </testcase>
        <testcase classname="packages/shared/test/SerializedBuffer.test.ts" name="SerializedBuffer &gt; should have a hex representation" time="0.000194479">
        </testcase>
        <testcase classname="packages/shared/test/SerializedBuffer.test.ts" name="SerializedBuffer &gt; should have a data property" time="0.000448648">
        </testcase>
        <testcase classname="packages/shared/test/SerializedBuffer.test.ts" name="SerializedBuffer &gt; should thow when there is an error in deserialize" time="0.001210016">
        </testcase>
        <testcase classname="packages/shared/test/SerializedBuffer.test.ts" name="SerializedBuffer &gt; should throw when there is an error in serialize" time="0.001101305">
        </testcase>
    </testsuite>
    <testsuite name="packages/shared/test/legacyHeader.test.ts" timestamp="2024-12-15T11:33:32.673Z" hostname="strawberry" tests="1" failures="0" errors="0" skipped="0" time="0.002979728">
        <testcase classname="packages/shared/test/legacyHeader.test.ts" name="legacyHeader &gt; should have a length of 4" time="0.001586284">
        </testcase>
    </testsuite>
    <testsuite name="packages/shared-packets/test/BasePacket.test.ts" timestamp="2024-12-15T11:33:32.674Z" hostname="strawberry" tests="6" failures="0" errors="0" skipped="0" time="0.006055207">
        <testcase classname="packages/shared-packets/test/BasePacket.test.ts" name="BasePacket &gt; should initialize with default values" time="0.00256954">
        </testcase>
        <testcase classname="packages/shared-packets/test/BasePacket.test.ts" name="BasePacket &gt; should initialize with provided values" time="0.000372148">
        </testcase>
        <testcase classname="packages/shared-packets/test/BasePacket.test.ts" name="BasePacket &gt; should serialize data correctly" time="0.000622858">
        </testcase>
        <testcase classname="packages/shared-packets/test/BasePacket.test.ts" name="BasePacket &gt; should deserialize data correctly" time="0.000535797">
        </testcase>
        <testcase classname="packages/shared-packets/test/BasePacket.test.ts" name="BasePacket &gt; should return correct byte size" time="0.000267259">
        </testcase>
        <testcase classname="packages/shared-packets/test/BasePacket.test.ts" name="BasePacket &gt; should set and get data buffer correctly" time="0.00019227">
        </testcase>
    </testsuite>
    <testsuite name="packages/shared-packets/test/BufferSerializer.test.ts" timestamp="2024-12-15T11:33:32.675Z" hostname="strawberry" tests="8" failures="0" errors="0" skipped="0" time="0.006092387">
        <testcase classname="packages/shared-packets/test/BufferSerializer.test.ts" name="BufferSerializer &gt; should initialize with a buffer of length 4" time="0.001760273">
        </testcase>
        <testcase classname="packages/shared-packets/test/BufferSerializer.test.ts" name="BufferSerializer &gt; should serialize data to a buffer" time="0.000419868">
        </testcase>
        <testcase classname="packages/shared-packets/test/BufferSerializer.test.ts" name="BufferSerializer &gt; should deserialize data from a buffer" time="0.000990626">
        </testcase>
        <testcase classname="packages/shared-packets/test/BufferSerializer.test.ts" name="BufferSerializer &gt; should throw an error if data is too short in _assertEnoughData" time="0.000347509">
        </testcase>
        <testcase classname="packages/shared-packets/test/BufferSerializer.test.ts" name="BufferSerializer &gt; should not throw an error if data is sufficient in _assertEnoughData" time="0.000745077">
        </testcase>
        <testcase classname="packages/shared-packets/test/BufferSerializer.test.ts" name="BufferSerializer &gt; should return the correct byte size of the data" time="0.000163159">
        </testcase>
        <testcase classname="packages/shared-packets/test/BufferSerializer.test.ts" name="BufferSerializer &gt; should convert serialized data to a hexadecimal string" time="0.000194589">
        </testcase>
        <testcase classname="packages/shared-packets/test/BufferSerializer.test.ts" name="BufferSerializer &gt; should add a leading zero if the hex string length is odd" time="0.00014708">
        </testcase>
    </testsuite>
    <testsuite name="packages/shared-packets/test/GameMessageHeader.test.ts" timestamp="2024-12-15T11:33:32.676Z" hostname="strawberry" tests="6" failures="0" errors="0" skipped="0" time="0.005808177">
        <testcase classname="packages/shared-packets/test/GameMessageHeader.test.ts" name="GameMessageHeader &gt; should serialize and deserialize correctly for version 0" time="0.001916693">
        </testcase>
        <testcase classname="packages/shared-packets/test/GameMessageHeader.test.ts" name="GameMessageHeader &gt; should serialize and deserialize correctly for version 257" time="0.000721827">
        </testcase>
        <testcase classname="packages/shared-packets/test/GameMessageHeader.test.ts" name="GameMessageHeader &gt; should throw error if data is too short during deserialization" time="0.001040686">
        </testcase>
        <testcase classname="packages/shared-packets/test/GameMessageHeader.test.ts" name="GameMessageHeader &gt; should set and get payload encryption status correctly" time="0.000243549">
        </testcase>
        <testcase classname="packages/shared-packets/test/GameMessageHeader.test.ts" name="GameMessageHeader &gt; should convert to string correctly" time="0.000203239">
        </testcase>
        <testcase classname="packages/shared-packets/test/GameMessageHeader.test.ts" name="GameMessageHeader &gt; should copy correctly" time="0.000265689">
        </testcase>
    </testsuite>
    <testsuite name="packages/shared-packets/test/GameMessagePayload.test.ts" timestamp="2024-12-15T11:33:32.677Z" hostname="strawberry" tests="6" failures="0" errors="0" skipped="0" time="0.005478929">
        <testcase classname="packages/shared-packets/test/GameMessagePayload.test.ts" name="GameMessagePayload &gt; should create a copy of the payload" time="0.002956828">
        </testcase>
        <testcase classname="packages/shared-packets/test/GameMessagePayload.test.ts" name="GameMessagePayload &gt; should return the correct byte size" time="0.000231239">
        </testcase>
        <testcase classname="packages/shared-packets/test/GameMessagePayload.test.ts" name="GameMessagePayload &gt; should serialize the payload correctly" time="0.000212589">
        </testcase>
        <testcase classname="packages/shared-packets/test/GameMessagePayload.test.ts" name="GameMessagePayload &gt; should deserialize the payload correctly" time="0.000199529">
        </testcase>
        <testcase classname="packages/shared-packets/test/GameMessagePayload.test.ts" name="GameMessagePayload &gt; should correctly indicate if the payload is encrypted" time="0.000255009">
        </testcase>
        <testcase classname="packages/shared-packets/test/GameMessagePayload.test.ts" name="GameMessagePayload &gt; should set the payload encryption correctly" time="0.000244309">
        </testcase>
    </testsuite>
    <testsuite name="packages/shared-packets/test/GamePacket.test.ts" timestamp="2024-12-15T11:33:32.678Z" hostname="strawberry" tests="9" failures="0" errors="0" skipped="0" time="0.006072466">
        <testcase classname="packages/shared-packets/test/GamePacket.test.ts" name="GamePacket &gt; should deserialize v0 correctly" time="0.002005573">
        </testcase>
        <testcase classname="packages/shared-packets/test/GamePacket.test.ts" name="GamePacket &gt; should deserialize v1 correctly" time="0.000368929">
        </testcase>
        <testcase classname="packages/shared-packets/test/GamePacket.test.ts" name="GamePacket &gt; should be able to make a copy of the packet" time="0.000409268">
        </testcase>
        <testcase classname="packages/shared-packets/test/GamePacket.test.ts" name="GamePacket &gt; should be able to make a copy of the packet with new data" time="0.000261649">
        </testcase>
        <testcase classname="packages/shared-packets/test/GamePacket.test.ts" name="GamePacket &gt; should throw error if data is insufficient for header" time="0.000787247">
        </testcase>
        <testcase classname="packages/shared-packets/test/GamePacket.test.ts" name="GamePacket &gt; should throw error if checksum is incorrect for v1 packet" time="0.000281699">
        </testcase>
        <testcase classname="packages/shared-packets/test/GamePacket.test.ts" name="GamePacket &gt; should throw error if data is insufficient for full v1 packet" time="0.000270589">
        </testcase>
        <testcase classname="packages/shared-packets/test/GamePacket.test.ts" name="GamePacket &gt; should identify version v1 correctly" time="0.000204029">
        </testcase>
        <testcase classname="packages/shared-packets/test/GamePacket.test.ts" name="GamePacket &gt; should handle version v0 correctly" time="0.000181829">
        </testcase>
    </testsuite>
    <testsuite name="packages/shared-packets/test/GenericReplyPayload.test.ts" timestamp="2024-12-15T11:33:32.680Z" hostname="strawberry" tests="5" failures="0" errors="0" skipped="0" time="0.003485036">
        <testcase classname="packages/shared-packets/test/GenericReplyPayload.test.ts" name="GenericReplyPayload &gt; should have default values" time="0.001323965">
        </testcase>
        <testcase classname="packages/shared-packets/test/GenericReplyPayload.test.ts" name="GenericReplyPayload &gt; should return correct byte size" time="0.000202359">
        </testcase>
        <testcase classname="packages/shared-packets/test/GenericReplyPayload.test.ts" name="GenericReplyPayload &gt; should serialize correctly" time="0.000456569">
        </testcase>
        <testcase classname="packages/shared-packets/test/GenericReplyPayload.test.ts" name="GenericReplyPayload &gt; should deserialize correctly" time="0.000247759">
        </testcase>
        <testcase classname="packages/shared-packets/test/GenericReplyPayload.test.ts" name="GenericReplyPayload &gt; should set and get data buffer correctly" time="0.000170909">
        </testcase>
    </testsuite>
    <testsuite name="packages/shared-packets/test/GenericRequestPayload.test.ts" timestamp="2024-12-15T11:33:32.681Z" hostname="strawberry" tests="5" failures="0" errors="0" skipped="0" time="0.004979851">
        <testcase classname="packages/shared-packets/test/GenericRequestPayload.test.ts" name="GenericRequestPayload &gt; should return correct byte size" time="0.001551434">
        </testcase>
        <testcase classname="packages/shared-packets/test/GenericRequestPayload.test.ts" name="GenericRequestPayload &gt; should serialize data correctly" time="0.000553627">
        </testcase>
        <testcase classname="packages/shared-packets/test/GenericRequestPayload.test.ts" name="GenericRequestPayload &gt; should deserialize data correctly" time="0.000272689">
        </testcase>
        <testcase classname="packages/shared-packets/test/GenericRequestPayload.test.ts" name="GenericRequestPayload &gt; should set and get data buffer correctly" time="0.000193629">
        </testcase>
        <testcase classname="packages/shared-packets/test/GenericRequestPayload.test.ts" name="GenericRequestPayload &gt; should throw an error if there is not enough data to deserialize" time="0.000854567">
        </testcase>
    </testsuite>
    <testsuite name="packages/shared-packets/test/ServerMessageHeader.test.ts" timestamp="2024-12-15T11:33:32.682Z" hostname="strawberry" tests="6" failures="0" errors="0" skipped="0" time="0.004829582">
        <testcase classname="packages/shared-packets/test/ServerMessageHeader.test.ts" name="ServerMessageHeader &gt; should serialize correctly" time="0.00238021">
        </testcase>
        <testcase classname="packages/shared-packets/test/ServerMessageHeader.test.ts" name="ServerMessageHeader &gt; should deserialize correctly" time="0.000410358">
        </testcase>
        <testcase classname="packages/shared-packets/test/ServerMessageHeader.test.ts" name="ServerMessageHeader &gt; should validate signature correctly" time="0.00016453">
        </testcase>
        <testcase classname="packages/shared-packets/test/ServerMessageHeader.test.ts" name="ServerMessageHeader &gt; should set and get payload encryption correctly" time="0.000150189">
        </testcase>
        <testcase classname="packages/shared-packets/test/ServerMessageHeader.test.ts" name="ServerMessageHeader &gt; should convert to string correctly" time="0.000165829">
        </testcase>
        <testcase classname="packages/shared-packets/test/ServerMessageHeader.test.ts" name="ServerMessageHeader &gt; should convert to hex string correctly" time="0.000180759">
        </testcase>
    </testsuite>
    <testsuite name="packages/shared-packets/test/ServerMessagePayload.test.ts" timestamp="2024-12-15T11:33:32.683Z" hostname="strawberry" tests="1" failures="0" errors="0" skipped="0" time="0.004317183">
        <testcase classname="packages/shared-packets/test/ServerMessagePayload.test.ts" name="ServerMessagePayload &gt; should copy correctly" time="0.003066508">
        </testcase>
    </testsuite>
    <testsuite name="packages/shared-packets/test/ServerPacket.test.ts" timestamp="2024-12-15T11:33:32.683Z" hostname="strawberry" tests="8" failures="0" errors="0" skipped="0" time="0.00783559">
        <testcase classname="packages/shared-packets/test/ServerPacket.test.ts" name="ServerMessagePayload &gt; should serialize correctly" time="0.002105852">
        </testcase>
        <testcase classname="packages/shared-packets/test/ServerPacket.test.ts" name="ServerMessagePayload &gt; should deserialize correctly" time="0.000573997">
        </testcase>
        <testcase classname="packages/shared-packets/test/ServerPacket.test.ts" name="ServerMessagePayload &gt; should get and set messageId correctly" time="0.000230769">
        </testcase>
        <testcase classname="packages/shared-packets/test/ServerPacket.test.ts" name="ServerMessagePayload &gt; ServerPacket &gt; should serialize correctly" time="0.000972596">
        </testcase>
        <testcase classname="packages/shared-packets/test/ServerPacket.test.ts" name="ServerMessagePayload &gt; ServerPacket &gt; should deserialize correctly" time="0.000536608">
        </testcase>
        <testcase classname="packages/shared-packets/test/ServerPacket.test.ts" name="ServerMessagePayload &gt; ServerPacket &gt; should throw error if signature is invalid during serialization" time="0.001122576">
        </testcase>
        <testcase classname="packages/shared-packets/test/ServerPacket.test.ts" name="ServerMessagePayload &gt; ServerPacket &gt; should throw error if sequence is zero during serialization" time="0.000333998">
        </testcase>
        <testcase classname="packages/shared-packets/test/ServerPacket.test.ts" name="ServerMessagePayload &gt; ServerPacket &gt; should convert to string correctly" time="0.000353359">
        </testcase>
    </testsuite>
    <testsuite name="packages/transactions/test/LobbyMessage.test.ts" timestamp="2024-12-15T11:33:32.685Z" hostname="strawberry" tests="7" failures="0" errors="0" skipped="0" time="0.008991265">
        <testcase classname="packages/transactions/test/LobbyMessage.test.ts" name="LobbyMessage &gt; .size() &gt; should have a starting value of 5" time="0.001764833">
        </testcase>
        <testcase classname="packages/transactions/test/LobbyMessage.test.ts" name="LobbyMessage &gt; .serialize() &gt; should return a buffer of the correct size" time="0.000802347">
        </testcase>
        <testcase classname="packages/transactions/test/LobbyMessage.test.ts" name="LobbyInfo &gt; .size() &gt; should have a starting value of 563" time="0.000665887">
        </testcase>
        <testcase classname="packages/transactions/test/LobbyMessage.test.ts" name="LobbyInfo &gt; .serialize() &gt; should return a buffer of the correct size" time="0.000816766">
        </testcase>
        <testcase classname="packages/transactions/test/LobbyMessage.test.ts" name="LobbyInfo &gt; .deserialize() &gt; should throw an error when passed a buffer of the wrong size" time="0.001595454">
        </testcase>
        <testcase classname="packages/transactions/test/LobbyMessage.test.ts" name="LobbyInfo &gt; .deserialize() &gt; should not throw an error when passed a buffer of the correct size" time="0.000750727">
        </testcase>
        <testcase classname="packages/transactions/test/LobbyMessage.test.ts" name="LobbyInfo &gt; .deserialize() &gt; should set the correct values when passed a buffer of the correct size" time="0.000364398">
        </testcase>
    </testsuite>
    <testsuite name="packages/transactions/test/OwnedVehiclesMessage.test.ts" timestamp="2024-12-15T11:33:32.686Z" hostname="strawberry" tests="2" failures="0" errors="0" skipped="0" time="0.004917421">
        <testcase classname="packages/transactions/test/OwnedVehiclesMessage.test.ts" name="OwnedVehiclesMessage &gt; should serialize" time="0.002791779">
        </testcase>
        <testcase classname="packages/transactions/test/OwnedVehiclesMessage.test.ts" name="OwnedVehicle &gt; should serialize" time="0.000541828">
        </testcase>
    </testsuite>
    <testsuite name="packages/transactions/test/PartsAssemblyMessage.test.ts" timestamp="2024-12-15T11:33:32.686Z" hostname="strawberry" tests="2" failures="0" errors="0" skipped="0" time="0.005414159">
        <testcase classname="packages/transactions/test/PartsAssemblyMessage.test.ts" name="PartsAssemblyMessage &gt; should serialize" time="0.002959819">
        </testcase>
        <testcase classname="packages/transactions/test/PartsAssemblyMessage.test.ts" name="Part &gt; should serialize" time="0.000862646">
        </testcase>
    </testsuite>
    <testsuite name="packages/transactions/test/PlayerInfoMessage.test.ts" timestamp="2024-12-15T11:33:32.687Z" hostname="strawberry" tests="1" failures="0" errors="0" skipped="0" time="0.005015051">
        <testcase classname="packages/transactions/test/PlayerInfoMessage.test.ts" name="PlayerInfoMessage &gt; should serialize" time="0.003502457">
        </testcase>
    </testsuite>
    <testsuite name="packages/transactions/test/PlayerRacingHistoryMessage.test.ts" timestamp="2024-12-15T11:33:32.687Z" hostname="strawberry" tests="1" failures="0" errors="0" skipped="0" time="0.003004909">
        <testcase classname="packages/transactions/test/PlayerRacingHistoryMessage.test.ts" name="Create PlayerRacingHistoryMessage instance" time="0.001757243">
        </testcase>
    </testsuite>
    <testsuite name="packages/transactions/test/TClientConnectMessage.test.ts" timestamp="2024-12-15T11:33:32.687Z" hostname="strawberry" tests="1" failures="0" errors="0" skipped="0" time="0.003494896">
        <testcase classname="packages/transactions/test/TClientConnectMessage.test.ts" name="TClientConnectMessage &gt; .byteLength &gt; should have a value of 51" time="0.001920913">
        </testcase>
    </testsuite>
    <testsuite name="packages/transactions/test/_getPlayerRaceHistory.test.ts" timestamp="2024-12-15T11:33:32.688Z" hostname="strawberry" tests="1" failures="0" errors="0" skipped="0" time="0.005361509">
        <testcase classname="packages/transactions/test/_getPlayerRaceHistory.test.ts" name="_getPlayerRaceHistory &gt; should return a PlayerRacingHistoryMessage" time="0.003848855">
        </testcase>
    </testsuite>
    <testsuite name="packages/transactions/test/clientConnect.test.ts" timestamp="2024-12-15T11:33:32.688Z" hostname="strawberry" tests="1" failures="0" errors="0" skipped="0" time="0.004694441">
        <testcase classname="packages/transactions/test/clientConnect.test.ts" name="clientConnect &gt; throws when connection is not found" time="0.003709396">
        </testcase>
    </testsuite>
    <testsuite name="packages/transactions/test/getLobbies.test.ts" timestamp="2024-12-15T11:33:32.688Z" hostname="strawberry" tests="1" failures="0" errors="0" skipped="0" time="0.007336151">
        <testcase classname="packages/transactions/test/getLobbies.test.ts" name="getLobbies &gt; should return a promise" time="0.005417449">
        </testcase>
    </testsuite>
    <testsuite name="packages/transactions/test/login.test.ts" timestamp="2024-12-15T11:33:32.689Z" hostname="strawberry" tests="1" failures="0" errors="0" skipped="0" time="0.00777046">
        <testcase classname="packages/transactions/test/login.test.ts" name="login &gt; returns a message" time="0.005966857">
        </testcase>
    </testsuite>
    <testsuite name="packages/transactions/test/trackingPing.test.ts" timestamp="2024-12-15T11:33:32.689Z" hostname="strawberry" tests="1" failures="0" errors="0" skipped="0" time="0.004295323">
        <testcase classname="packages/transactions/test/trackingPing.test.ts" name="trackingPing &gt; does not return a message" time="0.002936678">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/test/Logger.test.ts" timestamp="2024-12-15T11:33:32.690Z" hostname="strawberry" tests="1" failures="0" errors="0" skipped="0" time="0.006810904">
        <testcase classname="src/utils/test/Logger.test.ts" name="Logger &gt; should log messages" time="0.002015282">
        </testcase>
    </testsuite>
    <testsuite name="packages/lobby/test/handlers/handleSendMiniRiffList.test.ts" timestamp="2024-12-15T11:33:32.690Z" hostname="strawberry" tests="1" failures="0" errors="0" skipped="0" time="0.005853097">
        <testcase classname="packages/lobby/test/handlers/handleSendMiniRiffList.test.ts" name="handleSendMiniRiffList &gt; should return a buffer" time="0.004325053">
        </testcase>
    </testsuite>
    <testsuite name="packages/mcots/src/payloads/ClientConnectMessage.test.ts" timestamp="2024-12-15T11:33:32.690Z" hostname="strawberry" tests="2" failures="0" errors="0" skipped="0" time="0.006940113">
        <testcase classname="packages/mcots/src/payloads/ClientConnectMessage.test.ts" name="ClientConnectionMessage &gt; should deserialize the data correctly" time="0.003006508">
        </testcase>
        <testcase classname="packages/mcots/src/payloads/ClientConnectMessage.test.ts" name="ClientConnectionMessage &gt; should throw an error if there is not enough data to deserialize" time="0.002172671">
        </testcase>
    </testsuite>
    <testsuite name="packages/mcots/src/payloads/utils.test.ts" timestamp="2024-12-15T11:33:32.691Z" hostname="strawberry" tests="4" failures="0" errors="0" skipped="0" time="0.004004865">
        <testcase classname="packages/mcots/src/payloads/utils.test.ts" name="readStringFromBuffer &gt; should read a string from the buffer" time="0.001694734">
        </testcase>
        <testcase classname="packages/mcots/src/payloads/utils.test.ts" name="readStringFromBuffer &gt; should handle empty strings" time="0.000281239">
        </testcase>
        <testcase classname="packages/mcots/src/payloads/utils.test.ts" name="readStringFromBuffer &gt; should handle strings with null characters" time="0.000233159">
        </testcase>
        <testcase classname="packages/mcots/src/payloads/utils.test.ts" name="readStringFromBuffer &gt; should handle start and end indices outside the buffer range" time="0.000237339">
        </testcase>
    </testsuite>
</testsuites>
