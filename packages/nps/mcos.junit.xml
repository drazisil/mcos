<?xml version="1.0" encoding="UTF-8" ?>
<testsuites name="vitest tests" tests="37" failures="0" errors="0" time="0.893">
    <testsuite name="test/BaseSerializable.test.ts" timestamp="2024-12-15T11:33:36.619Z" hostname="strawberry" tests="4" failures="0" errors="0" skipped="0" time="0.004871891">
        <testcase classname="test/BaseSerializable.test.ts" name="BaseSerializable &gt; should throw an error when calling serialize" time="0.00258015">
        </testcase>
        <testcase classname="test/BaseSerializable.test.ts" name="BaseSerializable &gt; should throw an error when calling deserialize" time="0.000365018">
        </testcase>
        <testcase classname="test/BaseSerializable.test.ts" name="BaseSerializable &gt; should throw an error when calling getByteSize" time="0.000240859">
        </testcase>
        <testcase classname="test/BaseSerializable.test.ts" name="BaseSerializable &gt; should throw an error when calling toString" time="0.00021935">
        </testcase>
    </testsuite>
    <testsuite name="test/index.test.ts" timestamp="2024-12-15T11:33:36.621Z" hostname="strawberry" tests="1" failures="0" errors="0" skipped="0" time="0.00494187">
        <testcase classname="test/index.test.ts" name="example &gt; should pass" time="0.00245192">
        </testcase>
    </testsuite>
    <testsuite name="test/pureCompare.test.ts" timestamp="2024-12-15T11:33:36.622Z" hostname="strawberry" tests="20" failures="0" errors="0" skipped="0" time="0.008864875">
        <testcase classname="test/pureCompare.test.ts" name="isZero &gt; returns true if the number is zero" time="0.001630074">
        </testcase>
        <testcase classname="test/pureCompare.test.ts" name="isZero &gt; returns false if the number is not zero" time="0.000244899">
        </testcase>
        <testcase classname="test/pureCompare.test.ts" name="isUndefined &gt; returns true if the value is undefined" time="0.00022531">
        </testcase>
        <testcase classname="test/pureCompare.test.ts" name="isUndefined &gt; returns false if the value is not undefined" time="0.00020153">
        </testcase>
        <testcase classname="test/pureCompare.test.ts" name="lessThan &gt; returns true if the first number is less than the second number" time="0.000242369">
        </testcase>
        <testcase classname="test/pureCompare.test.ts" name="lessThan &gt; returns false if the first number is greater than or equal to the second number" time="0.000251829">
        </testcase>
        <testcase classname="test/pureCompare.test.ts" name="lessThanOrEqual &gt; returns true if the first number is less than or equal to the second number" time="0.000261599">
        </testcase>
        <testcase classname="test/pureCompare.test.ts" name="lessThanOrEqual &gt; returns false if the first number is greater than the second number" time="0.000211659">
        </testcase>
        <testcase classname="test/pureCompare.test.ts" name="greaterThan &gt; returns true if the first number is greater than the second number" time="0.000216219">
        </testcase>
        <testcase classname="test/pureCompare.test.ts" name="greaterThan &gt; returns false if the first number is less than or equal to the second number" time="0.000241409">
        </testcase>
        <testcase classname="test/pureCompare.test.ts" name="greaterThanOrEqual &gt; returns true if the first number is greater than or equal to the second number" time="0.000282729">
        </testcase>
        <testcase classname="test/pureCompare.test.ts" name="greaterThanOrEqual &gt; returns false if the first number is less than the second number" time="0.000206029">
        </testcase>
        <testcase classname="test/pureCompare.test.ts" name="areBothZero &gt; returns true if both numbers are zero" time="0.0002187">
        </testcase>
        <testcase classname="test/pureCompare.test.ts" name="areBothZero &gt; returns false if at least one of the numbers is not zero" time="0.000279139">
        </testcase>
        <testcase classname="test/pureCompare.test.ts" name="areBothUndefined &gt; returns true if both values are undefined" time="0.000236429">
        </testcase>
        <testcase classname="test/pureCompare.test.ts" name="areBothUndefined &gt; returns false if at least one of the values is not undefined" time="0.000283459">
        </testcase>
        <testcase classname="test/pureCompare.test.ts" name="areBothSet &gt; returns true if both values are set" time="0.000322718">
        </testcase>
        <testcase classname="test/pureCompare.test.ts" name="areBothSet &gt; returns false if at least one of the values is not set" time="0.000309619">
        </testcase>
        <testcase classname="test/pureCompare.test.ts" name="isOnlyOneSet &gt; returns true if only one of the values is set" time="0.000275519">
        </testcase>
        <testcase classname="test/pureCompare.test.ts" name="isOnlyOneSet &gt; returns false if both values are set or both values are not set" time="0.000249689">
        </testcase>
    </testsuite>
    <testsuite name="test/pureGet.test.ts" timestamp="2024-12-15T11:33:36.626Z" hostname="strawberry" tests="12" failures="0" errors="0" skipped="0" time="0.008123338">
        <testcase classname="test/pureGet.test.ts" name="getWord &gt; returns the word at the specified offset in little-endian format" time="0.001676783">
        </testcase>
        <testcase classname="test/pureGet.test.ts" name="getWord &gt; returns the word at the specified offset in big-endian format" time="0.000356609">
        </testcase>
        <testcase classname="test/pureGet.test.ts" name="getDWord &gt; returns the dword at the specified offset in little-endian format" time="0.000336758">
        </testcase>
        <testcase classname="test/pureGet.test.ts" name="getDWord &gt; returns the dword at the specified offset in big-endian format" time="0.000289549">
        </testcase>
        <testcase classname="test/pureGet.test.ts" name="getNBytes &gt; returns the first n bytes of a buffer" time="0.001440584">
        </testcase>
        <testcase classname="test/pureGet.test.ts" name="getAsHex &gt; returns the hexadecimal string representation of a buffer" time="0.000301419">
        </testcase>
        <testcase classname="test/pureGet.test.ts" name="getAsHex &gt; adds a leading zero if the length of the hexadecimal string is odd" time="0.000185679">
        </testcase>
        <testcase classname="test/pureGet.test.ts" name="getLenString &gt; returns the string from a buffer based on the given offset and length in little-endian format" time="0.000570337">
        </testcase>
        <testcase classname="test/pureGet.test.ts" name="getLenString &gt; returns the string from a buffer based on the given offset and length in big-endian format" time="0.00020226">
        </testcase>
        <testcase classname="test/pureGet.test.ts" name="getLenBlob &gt; returns the blob from a buffer based on the given offset and length in little-endian format" time="0.000363759">
        </testcase>
        <testcase classname="test/pureGet.test.ts" name="getLenBlob &gt; returns the blob from a buffer based on the given offset and length in big-endian format" time="0.000238039">
        </testcase>
        <testcase classname="test/pureGet.test.ts" name="getShortBool &gt; returns the 2-byte boolean value from the specified buffer at the given offset" time="0.000226729">
        </testcase>
    </testsuite>
</testsuites>
