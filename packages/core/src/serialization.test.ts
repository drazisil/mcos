import { describe, it, expect } from "vitest";
import {
    AddPersona,
    GameLogin,
    GameLoginReply,
    GetPersonaInfoRequest,
    GetPersonaMapListRequest,
    Header,
    Login,
    LoginRequestReply,
    Persona,
    SerializedList,
    SessionKey,
    UserAction,
    UserStatusRequest,
} from "./serialization.js";
import { deserializeString } from "./serializationHelpers.js";

describe("serialization", () => {
    describe.skip("AddPersona", () => {});

    describe.skip("GameLogin", () => {});

    describe.skip("GameLoginReply", () => {});

    describe.skip("GetPersonaInfoRequest", () => {});

    describe.skip("GetPersonaMapListRequest", () => {});

    describe("Header", () => {
        it("should allow passing in values to constructor", () => {
            const values = {
                messageCode: 12279,
                messageLength: 0,
                messageVersion: 0,
                messageChecksum: 5,
            };

            const header = new Header(values);
            expect(header.messageCode).toEqual(values.messageCode);
            expect(header.messageLength).toEqual(values.messageLength);
            expect(header.messageVersion).toEqual(values.messageVersion);
            expect(header.messageChecksum).toEqual(values.messageChecksum);
        });

        it("should have a default constructor", () => {
            const header = new Header();
            expect(header.messageCode).toEqual(0);
            expect(header.messageLength).toEqual(0);
            expect(header.messageVersion).toEqual(0);
            expect(header.messageChecksum).toEqual(0);
        });

        it("should serialize", () => {
            const header = new Header({
                messageCode: 1281,
                messageLength: 318,
                messageVersion: 257,
                messageChecksum: 318,
            });

            const expected = Buffer.from([
                0x05, 0x01,

                0x01, 0x3e,

                0x01, 0x01,

                0x00, 0x00,

                0x00, 0x00, 0x01, 0x3e,
            ]);

            const buf = header.serialize();
            expect(buf).toEqual(expected);
        });
    });

    describe("Login", () => {
        it("should allow optional constructior of header", () => {
            const header = new Header();

            const login = new Login({ header });
            expect(login.header).toBeInstanceOf(Header);
        });

        it("should allow optional constructior of contextId", () => {
            const values = {
                contextId: "d316cd2dd6bf870893dfbaaf17f965884e",
            };

            const login = new Login(values);
            expect(login.contextId).toEqual(values.contextId);
        });

        it("should allow optional constructior of encryptedSessionKey", () => {
            const values = {
                encryptedSessionKey: "encryptionKey",
            };
            const login = new Login(values);
            expect(login.encryptedSessionKey).toEqual(
                values.encryptedSessionKey,
            );
        });

        it("should have a default constructor", () => {
            const login = new Login();
            expect(login.encryptedSessionKey).toEqual("");
        });

        it("should have a default GAME_CODE", () => {
            const login = new Login();
            expect(login.GAME_CODE).toEqual("2176");
        });

        it("should have banned default to false", () => {
            const login = new Login();
            expect(login.banned).toEqual(false);
        });

        it("should have gagged default to false", () => {
            const login = new Login();
            expect(login.gagged).toEqual(false);
        });

        it("should serialize", () => {
            const header = new Header({
                messageCode: 1281,
                messageLength: 318,
                messageVersion: 257,
                messageChecksum: 318,
            });
            const contextId = "d316cd2dd6bf870893dfbaaf17f965884e";
            const encryptedSessionKey = deserializeString(
                Buffer.from([
                    0x01, 0x00, 0x36, 0x39, 0x45, 0x42, 0x37, 0x37, 0x30, 0x38,
                    0x45, 0x32, 0x45, 0x41, 0x35, 0x36, 0x46, 0x43, 0x44, 0x45,
                    0x37, 0x32, 0x36, 0x42, 0x31, 0x31, 0x38, 0x30, 0x30, 0x34,
                    0x43, 0x44, 0x38, 0x31, 0x35, 0x31, 0x30, 0x41, 0x45, 0x31,
                    0x30, 0x41, 0x41, 0x30, 0x42, 0x45, 0x42, 0x37, 0x33, 0x37,
                    0x35, 0x32, 0x33, 0x33, 0x30, 0x39, 0x30, 0x32, 0x32, 0x41,
                    0x45, 0x43, 0x44, 0x41, 0x37, 0x46, 0x30, 0x45, 0x44, 0x31,
                    0x39, 0x30, 0x43, 0x35, 0x34, 0x32, 0x37, 0x39, 0x42, 0x34,
                    0x44, 0x31, 0x35, 0x33, 0x43, 0x31, 0x41, 0x36, 0x33, 0x30,
                    0x45, 0x38, 0x46, 0x37, 0x39, 0x33, 0x41, 0x35, 0x38, 0x30,
                    0x46, 0x45, 0x45, 0x46, 0x39, 0x35, 0x32, 0x35, 0x42, 0x46,
                    0x36, 0x43, 0x39, 0x41, 0x38, 0x38, 0x30, 0x46, 0x36, 0x33,
                    0x46, 0x33, 0x30, 0x46, 0x38, 0x35, 0x35, 0x44, 0x38, 0x34,
                    0x41, 0x42, 0x46, 0x39, 0x42, 0x34, 0x31, 0x39, 0x46, 0x32,
                    0x41, 0x41, 0x44, 0x32, 0x33, 0x34, 0x44, 0x37, 0x31, 0x35,
                    0x34, 0x34, 0x44, 0x42, 0x42, 0x32, 0x37, 0x31, 0x34, 0x37,
                    0x41, 0x45, 0x46, 0x39, 0x33, 0x32, 0x31, 0x35, 0x45, 0x31,
                    0x33, 0x37, 0x33, 0x31, 0x46, 0x32, 0x31, 0x30, 0x38, 0x39,
                    0x30, 0x33, 0x35, 0x41, 0x44, 0x32, 0x37, 0x46, 0x41, 0x38,
                    0x41, 0x33, 0x31, 0x42, 0x38, 0x43, 0x46, 0x38, 0x36, 0x31,
                    0x32, 0x45, 0x42, 0x36, 0x46, 0x35, 0x46, 0x46, 0x32, 0x45,
                    0x32, 0x41, 0x31, 0x31, 0x41, 0x38, 0x39, 0x38, 0x32, 0x39,
                    0x36, 0x41, 0x36, 0x35, 0x33, 0x38, 0x30, 0x46, 0x34, 0x32,
                    0x41, 0x39, 0x34, 0x37, 0x37, 0x38, 0x39, 0x33, 0x37, 0x36,
                    0x45, 0x44, 0x46, 0x44, 0x35, 0x41, 0x43, 0x46, 0x44, 0x45,
                    0x41, 0x38, 0x45, 0x34, 0x44, 0x31, 0x45, 0x32,
                ]),
            );
            const values = {
                header,
                contextId,
                encryptedSessionKey,
            };
            const login = new Login(values);

            const expected = Buffer.from([
                0x05, 0x01, 0x01, 0x3e, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x3e, 0x00, 0x22, 0x64, 0x33, 0x31, 0x36, 0x63, 0x64,
                0x32, 0x64, 0x64, 0x36, 0x62, 0x66, 0x38, 0x37, 0x30, 0x38,
                0x39, 0x33, 0x64, 0x66, 0x62, 0x61, 0x61, 0x66, 0x31, 0x37,
                0x66, 0x39, 0x36, 0x35, 0x38, 0x38, 0x34, 0x65, 0x00, 0x00,
                0x01, 0x00, 0x36, 0x39, 0x45, 0x42, 0x37, 0x37, 0x30, 0x38,
                0x45, 0x32, 0x45, 0x41, 0x35, 0x36, 0x46, 0x43, 0x44, 0x45,
                0x37, 0x32, 0x36, 0x42, 0x31, 0x31, 0x38, 0x30, 0x30, 0x34,
                0x43, 0x44, 0x38, 0x31, 0x35, 0x31, 0x30, 0x41, 0x45, 0x31,
                0x30, 0x41, 0x41, 0x30, 0x42, 0x45, 0x42, 0x37, 0x33, 0x37,
                0x35, 0x32, 0x33, 0x33, 0x30, 0x39, 0x30, 0x32, 0x32, 0x41,
                0x45, 0x43, 0x44, 0x41, 0x37, 0x46, 0x30, 0x45, 0x44, 0x31,
                0x39, 0x30, 0x43, 0x35, 0x34, 0x32, 0x37, 0x39, 0x42, 0x34,
                0x44, 0x31, 0x35, 0x33, 0x43, 0x31, 0x41, 0x36, 0x33, 0x30,
                0x45, 0x38, 0x46, 0x37, 0x39, 0x33, 0x41, 0x35, 0x38, 0x30,
                0x46, 0x45, 0x45, 0x46, 0x39, 0x35, 0x32, 0x35, 0x42, 0x46,
                0x36, 0x43, 0x39, 0x41, 0x38, 0x38, 0x30, 0x46, 0x36, 0x33,
                0x46, 0x33, 0x30, 0x46, 0x38, 0x35, 0x35, 0x44, 0x38, 0x34,
                0x41, 0x42, 0x46, 0x39, 0x42, 0x34, 0x31, 0x39, 0x46, 0x32,
                0x41, 0x41, 0x44, 0x32, 0x33, 0x34, 0x44, 0x37, 0x31, 0x35,
                0x34, 0x34, 0x44, 0x42, 0x42, 0x32, 0x37, 0x31, 0x34, 0x37,
                0x41, 0x45, 0x46, 0x39, 0x33, 0x32, 0x31, 0x35, 0x45, 0x31,
                0x33, 0x37, 0x33, 0x31, 0x46, 0x32, 0x31, 0x30, 0x38, 0x39,
                0x30, 0x33, 0x35, 0x41, 0x44, 0x32, 0x37, 0x46, 0x41, 0x38,
                0x41, 0x33, 0x31, 0x42, 0x38, 0x43, 0x46, 0x38, 0x36, 0x31,
                0x32, 0x45, 0x42, 0x36, 0x46, 0x35, 0x46, 0x46, 0x32, 0x45,
                0x32, 0x41, 0x31, 0x31, 0x41, 0x38, 0x39, 0x38, 0x32, 0x39,
                0x36, 0x41, 0x36, 0x35, 0x33, 0x38, 0x30, 0x46, 0x34, 0x32,
                0x41, 0x39, 0x34, 0x37, 0x37, 0x38, 0x39, 0x33, 0x37, 0x36,
                0x45, 0x44, 0x46, 0x44, 0x35, 0x41, 0x43, 0x46, 0x44, 0x45,
                0x41, 0x38, 0x45, 0x34, 0x44, 0x31, 0x45, 0x32, 0x00, 0x04,
                0x32, 0x31, 0x37, 0x36,
            ]);

            const buf = login.serialize();
            // expect(buf).toEqual(expected);
            expect(buf.toString("hex")).toEqual(expected.toString("hex"));
        });

        it("should deserialize", () => {
            const login = new Login();
            const buf = Buffer.from([
                0x05, 0x01, 0x01, 0x3e, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x3e, 0x00, 0x22, 0x64, 0x33, 0x31, 0x36, 0x63, 0x64,
                0x32, 0x64, 0x64, 0x36, 0x62, 0x66, 0x38, 0x37, 0x30, 0x38,
                0x39, 0x33, 0x64, 0x66, 0x62, 0x61, 0x61, 0x66, 0x31, 0x37,
                0x66, 0x39, 0x36, 0x35, 0x38, 0x38, 0x34, 0x65, 0x00, 0x00,
                0x01, 0x00, 0x36, 0x39, 0x45, 0x42, 0x37, 0x37, 0x30, 0x38,
                0x45, 0x32, 0x45, 0x41, 0x35, 0x36, 0x46, 0x43, 0x44, 0x45,
                0x37, 0x32, 0x36, 0x42, 0x31, 0x31, 0x38, 0x30, 0x30, 0x34,
                0x43, 0x44, 0x38, 0x31, 0x35, 0x31, 0x30, 0x41, 0x45, 0x31,
                0x30, 0x41, 0x41, 0x30, 0x42, 0x45, 0x42, 0x37, 0x33, 0x37,
                0x35, 0x32, 0x33, 0x33, 0x30, 0x39, 0x30, 0x32, 0x32, 0x41,
                0x45, 0x43, 0x44, 0x41, 0x37, 0x46, 0x30, 0x45, 0x44, 0x31,
                0x39, 0x30, 0x43, 0x35, 0x34, 0x32, 0x37, 0x39, 0x42, 0x34,
                0x44, 0x31, 0x35, 0x33, 0x43, 0x31, 0x41, 0x36, 0x33, 0x30,
                0x45, 0x38, 0x46, 0x37, 0x39, 0x33, 0x41, 0x35, 0x38, 0x30,
                0x46, 0x45, 0x45, 0x46, 0x39, 0x35, 0x32, 0x35, 0x42, 0x46,
                0x36, 0x43, 0x39, 0x41, 0x38, 0x38, 0x30, 0x46, 0x36, 0x33,
                0x46, 0x33, 0x30, 0x46, 0x38, 0x35, 0x35, 0x44, 0x38, 0x34,
                0x41, 0x42, 0x46, 0x39, 0x42, 0x34, 0x31, 0x39, 0x46, 0x32,
                0x41, 0x41, 0x44, 0x32, 0x33, 0x34, 0x44, 0x37, 0x31, 0x35,
                0x34, 0x34, 0x44, 0x42, 0x42, 0x32, 0x37, 0x31, 0x34, 0x37,
                0x41, 0x45, 0x46, 0x39, 0x33, 0x32, 0x31, 0x35, 0x45, 0x31,
                0x33, 0x37, 0x33, 0x31, 0x46, 0x32, 0x31, 0x30, 0x38, 0x39,
                0x30, 0x33, 0x35, 0x41, 0x44, 0x32, 0x37, 0x46, 0x41, 0x38,
                0x41, 0x33, 0x31, 0x42, 0x38, 0x43, 0x46, 0x38, 0x36, 0x31,
                0x32, 0x45, 0x42, 0x36, 0x46, 0x35, 0x46, 0x46, 0x32, 0x45,
                0x32, 0x41, 0x31, 0x31, 0x41, 0x38, 0x39, 0x38, 0x32, 0x39,
                0x36, 0x41, 0x36, 0x35, 0x33, 0x38, 0x30, 0x46, 0x34, 0x32,
                0x41, 0x39, 0x34, 0x37, 0x37, 0x38, 0x39, 0x33, 0x37, 0x36,
                0x45, 0x44, 0x46, 0x44, 0x35, 0x41, 0x43, 0x46, 0x44, 0x45,
                0x41, 0x38, 0x45, 0x34, 0x44, 0x31, 0x45, 0x32, 0x00, 0x04,
                0x32, 0x31, 0x37, 0x36,
            ]);

            login.deserialize(buf);
            expect(login.sizeOf()).toEqual(buf.byteLength);
            expect(login.contextId).toEqual(
                "d316cd2dd6bf870893dfbaaf17f965884e",
            );
            expect(login.encryptedSessionKey).toEqual(
                "69EB7708E2EA56FCDE726B118004CD81510AE10AA0BEB737523309022AECDA7F0ED190C54279B4D153C1A630E8F793A580FEEF9525BF6C9A880F63F30F855D84ABF9B419F2AAD234D71544DBB27147AEF93215E13731F21089035AD27FA8A31B8CF8612EB6F5FF2E2A11A898296A65380F42A947789376EDFD5ACFDEA8E4D1E2",
            );
        });
    });

    describe.skip("Persona", () => {});

    describe.skip("SerializedList", () => {});

    describe.skip("SessionKey", () => {});

    describe.skip("UserAction", () => {});

    describe.skip("UserStatusRequest", () => {});
});
