name: rustyserver

services:
    nginx:
        build:
            context: services/sslProxy
        ports:
            - "443:443"
            - "80:80"
        extra_hosts:
            - "host.docker.internal:host-gateway"
        env_file:
            - .env
        healthcheck:
            test: ["CMD", "service", "nginx", "status"]
            interval: 5s
            timeout: 30s
            retries: 5
            start_period: 30s
    db:
        image: postgres:14.6
        ports:
            - "5432:5432"
        # TODO: #1182 remove before prod https://github.com/drazisil/mco-server/issues/1008
        environment:
            POSTGRES_DB: ${DB_NAME:-rustydb}
            POSTGRES_USER: ${DB_USER:-postgres}
            POSTGRES_PASSWORD: ${DB_PASSWORD:?Database password is required}
        env_file:
            - .env
        healthcheck:
            test: [ "CMD-SHELL", "sh -c 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}'" ]
            interval: 10s
            timeout: 3s
            retries: 3

    pgadmin:
        image: dpage/pgadmin4:6.18
        # TODO: #1182 remove these before prod https://github.com/drazisil/mco-server/issues/1008
        environment:
            PGADMIN_DEFAULT_EMAIL: "admin@pgadmin.com"
            PGADMIN_DEFAULT_PASSWORD: "password"
            PGADMIN_LISTEN_PORT: "80"
            POSTGRES_DB: "mcos"
        env_file:
            - .env
        ports:
            - "15432:80"
        volumes:
            - pgadmin:/var/lib/pgadmin
        depends_on:
            db:
                condition: service_healthy
    server:
        build:
            context: .
            dockerfile: Dockerfile
        working_dir: /home/node/app
        environment:
            - NODE_ENV=production
            - NPM_CONFIG_PREFIX=/home/node/.npm-global
        volumes:
            - ./:/home/node/app
        expose:
            - "3000"
            - "6660"
            - "7003"
            - "8228"
            - "8226"
            - "8227"
            - "9000-9014"
            - "43200"
            - "43300"
            - "43400"
            - "53303"
        ports:
            # use if it is necessary to expose the container to the host machine
            - "3000:3000"
            - "6660:6660"
            - "7003:7003"
            - "8228:8228"
            - "8226:8226"
            - "8227:8227"
            - "9000-9014:9000-9014"
            - "43200:43200"
            - "43300:43300"
            - "43400:43400"
            - "53303:53303"
        entrypoint: /home/node/app/docker-entrypoint.sh
        init: true
        depends_on:
            db:
                condition: service_healthy
            nginx:
                condition: service_healthy
        env_file:
            - .env
    # Use root/example as user/password credentials

    mongo:
        image: mongo
        restart: always
        environment:
            MONGO_INITDB_ROOT_USERNAME: ${DB_USER:-root}
            MONGO_INITDB_ROOT_PASSWORD: ${DB_PASSWORD:?Database password is required}
        env_file:
            - .env

    mongo-express:
        image: mongo-express
        restart: always
        ports:
            - 8081:8081
        environment:
            ME_CONFIG_MONGODB_ADMINUSERNAME: ${DB_USER:-root}
            ME_CONFIG_MONGODB_ADMINPASSWORD: ${DB_PASSWORD:?Database password is required}
            ME_CONFIG_MONGODB_URL: mongodb://${DB_USER:-root}:${DB_PASSWORD:?Database password is required}@mongo:27017/
            ME_CONFIG_BASICAUTH: false


volumes:
    pgadmin:
    mongo:
